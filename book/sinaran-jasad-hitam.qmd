---
execute: 
  freeze: auto
---

# Sinaran Jasad Hitam {.unnumbered}

Jasad hitam ialah suatu jasad yang akan menyerap kesemua panjang gelombang cahaya dengan sempurna tanpa pantulan dan memancarkan juga kesemua panjang gelombang apabila berada dalam keseimbangan haba.
Bintang-bintang memiliki sifat ini.

Rumus terbaik yang memerihalkan taburan cahaya yang dipancarkan oleh bintang ialah [hukum Planck](./sinaran-jasad-hitam/Planck.md).
Ada pun begitu, pelajar Fizik lazimnya diajar tentang dua cubaan lampau ialah [hukum taburan Wien](./sinaran-jasad-hitam/taburan-Wien.md) dan [hukum Rayleigh--Jean](./sinaran-jasad-hitam/Rayleigh-Jeans.md) bagi mengetengahkan kepentingan hukum Planck.
Perkembangan tersebut boleh didapati dalam bahagian [sejarah](./sinaran-jasad-hitam/sejarah.md).
Selain itu, [hukum sesaran Wien](./sinaran-jasad-hitam/) yang memerihalkan puncak graf serta [hukum Stefan--Boltzmann](./sinaran-jasad-hitam/Stefan-Boltzmann.md) yang memerihalkan luas bawah graf juga adalah dua hukum yang penting berkaitan sinaran jasad hitam.

```{python}
#| echo: false
#| fig-align: center
 
import numpy as np
import matplotlib.pyplot as plt

# TODO Mungkin pakai frekuensi berbanding panjang gelombang lebih mudah nampak?

min_wavelength: float = 0.000_000_2
max_wavelength: float = 0.000_004

def Planck(wavelength: np.ndarray, temperature: float, h: float = 6.62e-34, boltzmann: float = 1.38e-23, speed_of_light: float = 3e8) -> np.ndarray:
    wavelength_five: np.ndarray = wavelength**5
    exponent_component: np.ndarray = wavelength*temperature*boltzmann
    exponent_minus_one: np.ndarray = np.exp(h*speed_of_light/exponent_component) - 1
    return (8*np.pi*h*speed_of_light/wavelength_five) * (1/exponent_minus_one)

def Wien(wavelength: np.ndarray, temperature: float, h: float = 6.62e-34, boltzmann: float = 1.38e-23, speed_of_light: float=3e8) -> np.ndarray:
    wavelength_five: np.ndarray = wavelength**5
    exponent_component: np.ndarray = wavelength*temperature*boltzmann
    exponent_minus_one: np.ndarray = np.exp(h*speed_of_light/exponent_component)
    return (8*np.pi*h*speed_of_light/wavelength_five) * (1/exponent_minus_one)

def RayleighJeans(wavelength: np.ndarray, temperature: float, h: float=6.62e-34, boltzmann: float = 1.38e-23, speed_of_light: float = 3e8) -> np.ndarray:
    wavelength_four: np.ndarray = wavelength**4
    numerator: float = boltzmann*temperature
    return 8*np.pi * numerator / wavelength_four

wavelength: np.ndarray = np.arange(min_wavelength, max_wavelength, step=0.2e-7)
temperature: float = 3_000

plt.plot(wavelength, Planck(wavelength, temperature), label='Planck')
plt.plot(wavelength, Wien(wavelength, temperature), label='Wien')
plt.plot(wavelength, RayleighJeans(wavelength, temperature), label='Rayleigh--Jeans')

wavelength_random: np.ndarray = np.arange(min_wavelength, max_wavelength, step=0.8e-7)

x_rand = Planck(wavelength_random, temperature) + np.random.default_rng(200).integers(low=-100, high=100)

plt.scatter(wavelength_random, x_rand, label='data contoh', marker='+', color='red')

plt.ylim(0, 60_000)

plt.title('Perbandingan model Planck, Wien dan Rayleigh--Jeans')
plt.xlabel('panjang gelombang')
plt.ylabel('keamatan')
plt.legend()
plt.show()
```